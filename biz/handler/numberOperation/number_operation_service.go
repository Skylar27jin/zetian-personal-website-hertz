// Code generated by hertz generator.
package numberOperation

import (
	"context"
	"fmt"
	"strconv"

	numberOperation "zetian-personal-website-hertz/biz/model/numberOperation"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	JWT "zetian-personal-website-hertz/biz/pkg/JWT"
)

// GetToBinary .
// @router /to_binary [GET]
func GetToBinary(ctx context.Context, c *app.RequestContext) {
	var err error
	var req numberOperation.GetToBinaryReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(numberOperation.GetToBinaryResp)
	resp.Res = toBinary(int(req.Number))
	c.JSON(consts.StatusOK, resp)
}

func toBinary(num int) string {
	if num == 0 {
		return "0"
	}
	res := ""
	for num > 0 {
		res = strconv.Itoa(num%2) + res
		num /= 2
	}
	return res
}

// DecodeJWT .
// @router /decode_jwt [GET]
func DecodeJWT(ctx context.Context, c *app.RequestContext) {
	var err error
	var req numberOperation.DecodeJWTReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(numberOperation.DecodeJWTResp)

	rawJWT := string(c.Cookie("JWT"))
	fmt.Println("RawJWT:", rawJWT)
	fmt.Println("Decoding JWT...")
	res, err := JWT.ParseJWT(rawJWT)

	if err != nil {
		resp.IsValid = false
		c.JSON(consts.StatusOK, resp)
		return
	}

	fmt.Println("Decoding JWT...:", res)
	resp.IsValid = true
	payload := make(map[string]string)
	for k, v := range res {
		payload[k] = fmt.Sprintf("%v", v)
	}
	resp.PayLoad = payload



	c.JSON(consts.StatusOK, resp)
}

// Code generated by hertz generator.
package base

import (
	"context"
	"fmt"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"zetian-personal-website-hertz/biz/config"
	user "zetian-personal-website-hertz/biz/model/user"
	authService "zetian-personal-website-hertz/biz/service/auth_service"
	userService "zetian-personal-website-hertz/biz/service/user_service"
)

// Login .
// @router /login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var req user.LoginReq
	if err := c.BindAndValidate(&req); err != nil {
		c.String(consts.StatusBadRequest, fmt.Sprintf("Invalid request: %v", err))
		return
	}
	fmt.Println(req.GetEmail(), "password:", req.GetPassword())
	// 验证用户名密码
	domainUser, err := userService.Login(ctx, req.GetEmail(), req.GetPassword())
	if err != nil {
		c.JSON(consts.StatusUnauthorized, user.LoginResp{
			IsSuccessful: false,
			ErrorMessage: err.Error(),
		})
		return
	}

	// 生成 JWT 并设置 Cookie
	token, err := authService.GenerateUserJWT(ctx, -1, domainUser.Username, domainUser.Email, -1)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, user.LoginResp{
			IsSuccessful: false,
			ErrorMessage: "JWT generation failed",
		})
		return
	}

	c.SetCookie("JWT",
		token,
		int(3600*24*7),
		"/",
		config.GetSpecificConfig().Domain,
		protocol.CookieSameSiteLaxMode,
		false,
		true) // HttpOnly Cookie

	c.JSON(consts.StatusOK, user.LoginResp{
		IsSuccessful: true,
		UserName:     domainUser.Username,
		Email:        domainUser.Email,
	})
}

// SignUp .
// @router /signup [POST]
func SignUp(ctx context.Context, c *app.RequestContext) {
	var req user.SignUpReq
	if err := c.BindAndValidate(&req); err != nil {
		c.String(consts.StatusBadRequest, fmt.Sprintf("Invalid request: %v", err))
		return
	}
	fmt.Println("username:", req.GetUsername(), "email:", req.GetEmail(), "password:", req.GetPassword())
	err := userService.SignUp(ctx, req.GetUsername(), req.GetPassword(), req.GetEmail())

	if err != nil {
		c.JSON(consts.StatusBadRequest, user.SignUpResp{
			IsSuccessful: false,
			ErrorMessage: err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, user.SignUpResp{
		IsSuccessful: true,
		UserName :       req.GetUsername(),
		Email:          req.GetEmail(),
	})
}
